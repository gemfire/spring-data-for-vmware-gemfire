// Copyright (c) VMware, Inc. 2022. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
plugins {
  id 'maven-publish'
}

// The published bom will constrain versions within geode of any subproject with this property set.
project.ext.set('constrainVersionInBom', true)

def license = '''
  Copyright (c) VMware, Inc. 2022. All rights reserved.
  SPDX-License-Identifier: Apache-2.0
  '''

publishing {
  publications {
    maven(MavenPublication) {
      afterEvaluate {
        from(components.java)
        groupId 'com.vmware.gemfire'
        artifactId project.ext.get("pomProjectArtifactName")
        pom {
          name = project.ext.has("pomProjectLongName") ? project.ext.get("pomProjectLongName") : ""
          description = project.ext.has("pomProjectDescription") ? project.ext.get("pomProjectDescription") : ""
          url = 'https://tanzu.vmware.com/gemfire'

          withXml {
            def providerAsElement = asElement()
            providerAsElement.insertBefore(
                    providerAsElement.ownerDocument().createComment(license),
                    providerAsElement.firstChild)
          }
          scm {
            connection = 'scm:git:https://github.com/gemfire/spring-data-for-vmware-gemfire.git'
            developerConnection = 'scm:git:https://github.com/gemfire/spring-data-for-vmware-gemfire.git'
            url = 'https://github.com/gemfire/spring-data-for-vmware-gemfire'
          }
        }
      }
      repositories {
        maven {
          def mavenPushRepositoryURL = project.findProperty("mavenPushRepository")
          if (mavenPushRepositoryURL != null) {
            url = mavenPushRepositoryURL
            if (url.toString().startsWith("http") || url.toString().startsWith("sftp")) {
              // Username / password credentials are only supported for http, https, and sftp repos.
              // See the Gradle documentation on Repository Types for more information.
              credentials {
                username project.findProperty("gemfirePublishRepoUsername")
                password project.findProperty("gemfirePublishRepoPassword")
              }
            }
          } else {
            System.out.println("WARNING: No push repository configured")
          }
        }
      }
    }
  }
}

tasks.register('install') {
  dependsOn tasks.named('publishToMavenLocal')
}

tasks.withType(GenerateModuleMetadata) {
  enabled = false
}
