import org.apache.tools.ant.taskdefs.condition.Os
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;

// Copyright (c) VMware, Inc. 2022. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

buildscript {
  dependencies {
    classpath 'com.google.cloud:google-cloud-storage:2.29.1'
  }
}

plugins {
  id 'java-library'
  id "io.freefair.lombok" version "8.0.1"
  id 'gemfire-repo-artifact-publishing'
  id 'spring-java-jar'
  id 'io.spring.dependency-management' version '1.1.0'
}

project.ext.set("pomProjectLongName", "Spring Data VMware GemFire")
project.ext.set("pomProjectArtifactName", "spring-data-${getSpringDataBaseVersion()}-gemfire-${getGemFireBaseVersion()}")
project.ext.set("pomProjectDescription", "Spring Data For VMware GemFire")

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  title = "Spring Data ${getSpringDataBaseVersion()} for VMware GemFire ${getGemFireBaseVersion()} Java API Reference"
  failOnError=false
}

dependencies {
  compileOnly "com.vmware.gemfire:gemfire-core:$gemfireVersion"
  compileOnly "com.vmware.gemfire:gemfire-logging:$gemfireVersion"
  compileOnly "com.vmware.gemfire:gemfire-cq:$gemfireVersion"
  compileOnly "com.vmware.gemfire:gemfire-wan:$gemfireVersion"
  compileOnly "com.vmware.gemfire:gemfire-gfsh:$gemfireVersion"
  compileOnly "com.vmware.gemfire:gemfire-tcp-server:$gemfireVersion"
  compileOnly "com.vmware.gemfire:gemfire-deployment-chained-classloader:$gemfireVersion"

  implementation 'javax.cache:cache-api:1.1.1'
  api "org.springframework:spring-context-support:$springFrameworkVersion"
  api "org.springframework:spring-tx:$springFrameworkVersion"
  api "org.springframework:spring-web:$springFrameworkVersion"
  api "org.springframework.data:spring-data-commons:$springDataVersion"
  implementation 'org.apache.shiro:shiro-spring:1.12.0'
  implementation 'org.aspectj:aspectjweaver:1.9.20.1'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
  runtimeOnly 'antlr:antlr:2.7.7'
  compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1') {
    exclude group: 'javax.annotation', module: 'jsr250-api'
  }

  testImplementation "com.vmware.gemfire:gemfire-core:$gemfireVersion"
  testImplementation "com.vmware.gemfire:gemfire-logging:$gemfireVersion"
  testImplementation "com.vmware.gemfire:gemfire-cq:$gemfireVersion"
  testImplementation "com.vmware.gemfire:gemfire-wan:$gemfireVersion"
  testImplementation "com.vmware.gemfire:gemfire-gfsh:$gemfireVersion"
  testImplementation "com.vmware.gemfire:gemfire-tcp-server:$gemfireVersion"
  testImplementation "com.vmware.gemfire:gemfire-deployment-chained-classloader:$gemfireVersion"

  testImplementation('jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1') {
    exclude group: 'javax.annotation', module: 'jsr250-api'
  }
  testImplementation "org.springframework:spring-test:$springFrameworkVersion"
  testImplementation 'javax.interceptor:javax.interceptor-api:1.2.2'
  testImplementation 'ch.qos.logback:logback-classic:1.4.11'
  testImplementation 'org.apache.logging.log4j:log4j-to-slf4j:2.19.0'
  testImplementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
  testImplementation 'org.apache.derby:derbyLocale_zh_TW:10.9.1.0'
  testImplementation 'org.apache.openwebbeans:openwebbeans-se:2.0.27:jakarta'
  testImplementation 'org.apache.openwebbeans:openwebbeans-spi:2.0.27:jakarta'
  testImplementation 'org.apache.openwebbeans:openwebbeans-impl:2.0.27:jakarta'
  testImplementation 'org.assertj:assertj-core:3.24.2'
  testImplementation 'org.iq80.snappy:snappy:0.4'
  testImplementation('org.springframework.shell:spring-shell:1.2.0.RELEASE') {
    exclude group: 'com.google.guava', module: 'guava'
  }
  testImplementation 'edu.umd.cs.mtc:multithreadedtc:1.01'

  testImplementation('jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1') {
    exclude group: 'javax.annotation', module: 'jsr250-api'
  }
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
  testImplementation 'org.junit.vintage:junit-vintage-engine:5.9.3'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'

  testImplementation "junit:junit:4.13.2"
  testImplementation "org.assertj:assertj-core:3.22.0"
  testImplementation "org.mockito:mockito-core:4.8.1"
  testImplementation "org.projectlombok:lombok:1.18.30"
  testImplementation "org.springframework:spring-test:$springFrameworkVersion"
  testImplementation "org.springframework.boot:spring-boot:3.1.6"
  testImplementation 'org.awaitility:awaitility:4.2.0'
}

java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

test {
  forkEvery = 1
//  maxParallelForks = 1

  systemProperty "java.util.logging.config.file", "${project.buildDir}/test-classes/java-util-logging.properties"
  systemProperty "javax.net.ssl.keyStore", "${project.buildDir}/test-classes/trusted.keystore"
  systemProperty "gemfire.disableShutdownHook", "true"
  systemProperty "logback.log.level", "error"
  systemProperty "spring.profiles.active", "apache-geode"

  filter {
    includeTestsMatching "*.*Tests"
    includeTestsMatching "*.*Test"
  }
}

gradle.taskGraph.whenReady({ graph ->
  tasks.withType(Test).each { test ->
    check.dependsOn test
    test.configure {
      onlyIf { !Boolean.getBoolean('skip.tests') }
      jvmArgs += ['-XX:+HeapDumpOnOutOfMemoryError', '-ea']
      jvmArgs += [
              // Product: BufferPool uses DirectBuffer
              "--add-exports=java.base/sun.nio.ch=ALL-UNNAMED",
              // Tests: CertificateBuilder uses numerous types declared here
              "--add-exports=java.base/sun.security.x509=ALL-UNNAMED",
              // Product: ManagementAgent's custom MBean servers extend types declared here
              "--add-exports=java.management/com.sun.jmx.remote.security=ALL-UNNAMED",

              // Product: UnsafeThreadLocal accesses fields and methods of ThreadLocal
              "--add-opens=java.base/java.lang=ALL-UNNAMED",
              // Product: AddressableMemoryManager accesses DirectByteBuffer constructor
              "--add-opens=java.base/java.nio=ALL-UNNAMED",
              // Tests: EnvironmentVariables rule accesses Collections$UnmodifiableMap.m
              "--add-opens=java.base/java.util=ALL-UNNAMED",
              // Tests: SecurityTestUtils resets SSL-related fields
              "--add-opens=java.base/sun.security.ssl=ALL-UNNAMED",
              "--add-opens=java.base/javax.net.ssl=ALL-UNNAMED",
      ]
      if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        jvmArgs += ["-XX:+UseZGC"]
      }
    }
  }
})

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(',').each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()))
              })
    }
  }
  maven { url 'https://repo.spring.io/milestone' }
}

String getGemFireBaseVersion() {
  return getBaseVersion(gemfireVersion)
}

String getSpringDataBaseVersion() {
  return getBaseVersion(springDataVersion)
}

static String getBaseVersion(String version) {
  def split = "${version}".split("\\.")
  if (split.length < 2) {
    throw new RuntimeException("version '$version' is malformed")
  }
  return "${split[0]}.${split[1]}"
}

tasks.register('copyJavadocsToBucket') {
  dependsOn javadocJar
  doLast {
    Storage storage = StorageOptions.newBuilder().setProjectId(project.findProperty('docsGCSProject')).build().getService()
    BlobId blobId = BlobId.of(project.findProperty("docsGCSBucket"), "${project.findProperty('pomProjectArtifactName')}/${project.version}/${javadocJar.outputs.files.singleFile.name}")
    BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build()
    storage.createFrom(blobInfo, javadocJar.outputs.files.singleFile.toPath())
  }
}