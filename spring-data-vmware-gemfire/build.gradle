// Copyright (c) VMware, Inc. 2022. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

plugins {
    id 'java-library'
    id "io.freefair.lombok" version "6.5.0.2"
    id 'gemfire-repo-artifact-publishing'
    id 'spring-java-jar'
}

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc{
  failOnError=false
}

project.ext.set("pomProjectLongName","Spring Data VMware GemFire")
project.ext.set("pomProjectArtifactName","spring-data-2.6-gemfire-${gemfireBaseVersion}")
project.ext.set("pomProjectDescription","Spring Data For VMware GemFire")

dependencies {
    api(platform("com.vmware.gemfire:gemfire-server-bom:$gemfireVersion")) {
        exclude group: 'org.apache.geode', module: 'geode-log4j'
    }
    api("org.springframework.data:spring-data-geode:$springDataGeodeVersion") {
        exclude group: 'org.apache.geode', module: 'geode-core'
        exclude group: 'org.apache.geode', module: 'geode-logging'
        exclude group: 'org.apache.geode', module: 'geode-cq'
        exclude group: 'org.apache.geode', module: 'geode-wan'
        exclude group: 'org.apache.geode', module: 'geode-gfsh'
        exclude group: 'org.apache.geode', module: 'geode-lucene'
        exclude group: 'org.apache.geode', module: 'geode-tcp-server'
    }

        api "com.vmware.gemfire:geode-core:$gemfireVersion"
        api "com.vmware.gemfire:geode-logging:$gemfireVersion"
        api "com.vmware.gemfire:geode-cq:$gemfireVersion"
        api "com.vmware.gemfire:geode-wan:$gemfireVersion"
        api "com.vmware.gemfire:geode-gfsh:$gemfireVersion"
        api "com.vmware.gemfire:geode-lucene:$gemfireVersion"
        api "com.vmware.gemfire:geode-tcp-server:$gemfireVersion"
        api "com.vmware.gemfire:geode-deployment-legacy:$gemfireVersion"
        api "com.vmware.gemfire:gemfire-version:$gemfireVersion"

    implementation 'javax.cache:cache-api:1.1.1'
    implementation 'org.springframework:spring-context-support:5.3.25'
    implementation 'org.springframework:spring-tx:5.3.25'
    implementation 'org.springframework:spring-web:5.3.25'
    implementation "org.springframework.data:spring-data-commons:$springDataGeodeVersion"
    implementation 'org.apache.shiro:shiro-spring:1.10.0'
    implementation 'org.aspectj:aspectjweaver:1.9.7'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
    runtimeOnly 'antlr:antlr:2.7.7'
    compileOnly('javax.enterprise:cdi-api:1.0') {
        exclude group: 'javax.annotation', module: 'jsr250-api'
    }
    testImplementation 'org.apache.geronimo.specs:geronimo-jcdi_2.0_spec:1.0.1'
    testImplementation 'javax.interceptor:javax.interceptor-api:1.2.1'
    testImplementation 'javax.el:el-api:2.2'
    testImplementation 'ch.qos.logback:logback-classic:1.2.5'
    testImplementation 'org.apache.logging.log4j:log4j-to-slf4j:2.17.2'
    testImplementation 'javax.annotation:javax.annotation-api:1.3.2'
    testImplementation 'org.apache.derby:derbyLocale_zh_TW:10.9.1.0'
    testImplementation 'org.apache.openwebbeans:openwebbeans-se:2.0.27'
    testImplementation 'org.assertj:assertj-core:3.21.0'
    testImplementation 'org.iq80.snappy:snappy:0.4'
    testImplementation('org.springframework.data:spring-data-geode-test:0.2.4-Q') {
        exclude group: 'org.mockito', module: 'mockito-core'
        exclude group: 'org.springframework.data', module: 'spring-data-geode'
    }
    testImplementation('org.springframework.shell:spring-shell:1.2.0.RELEASE') {
        exclude group: 'com.google.guava', module: 'guava'
    }
    testImplementation 'edu.umd.cs.mtc:multithreadedtc:1.01'
    testImplementation('org.mockito:mockito-core:3.12.4') {
        force = true
    }
    testImplementation('javax.enterprise:cdi-api:1.0') {
        exclude group: 'javax.annotation', module: 'jsr250-api'
    }
}

java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    test {
        java {
            srcDir file('src/test/java')
            srcDir file('src/sdg-test-read-only/java')
        }
        resources {
            srcDir file('src/test/resources')
            srcDir file('src/sdg-test-read-only/resources')
        }
    }
}

task copySDGTestClasses(type: Exec) {
    outputs.dir("${project.buildDir.toPath().resolve("tmp").resolve("spring-data-geode")}")
    workingDir project.rootProject.rootDir.toPath().resolve("scripts")
    commandLine 'chmod', '+x', 'copySDGTestResources.sh'
    commandLine './copySDGTestResources.sh', '-l', "${project.buildDir.toPath().resolve("tmp").resolve("spring-data-geode")}", "-b", "" + springDataGeodeBranch, "-t", "${project.projectDir.toPath().toAbsolutePath().toString()}"
}

task cleanSDGTestClasses(type: Exec) {
    commandLine "rm", "-rf", "${project.rootDir.toPath().toAbsolutePath().toString()}/sdg-test-read-only"
}

test {
    dependsOn("copySDGTestClasses")

    forkEvery = 1
    maxParallelForks = 1

    systemProperty "java.util.logging.config.file", "${project.buildDir}/test-classes/java-util-logging.properties"
    systemProperty "javax.net.ssl.keyStore", "${project.buildDir}/test-classes/trusted.keystore"
    systemProperty "gemfire.disableShutdownHook", "true"
    systemProperty "logback.log.level", "error"
    systemProperty "spring.profiles.active", "apache-geode"

    filter {
        includeTestsMatching "*.*Tests"
        includeTestsMatching "*.*Test"
        excludeTestsMatching "GemFirePropertiesUnitTests"
    }
}

clean {
    dependsOn("cleanSDGTestClasses")
}

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(",").each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()));
              });
    }
  }
}

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }
